{
  "author": {
    "name": "Derek Watson",
    "email": "watson@dcw.ca",
    "url": "http://dcw.ca"
  },
  "name": "jsuri",
  "description": "Uri and query string manipulation",
  "version": "1.2.2",
  "homepage": "https://github.com/derek-watson/jsUri",
  "repository": {
    "type": "git",
    "url": "git://github.com/derek-watson/jsUri.git"
  },
  "keywords": [
    "uri",
    "url",
    "query",
    "path"
  ],
  "main": "Uri",
  "scripts": {
    "test": "jake test"
  },
  "dependencies": {},
  "devDependencies": {
    "jasmine-node": ">= 1.0.26",
    "jshint": ">= 0.9.0",
    "uglify-js": ">= 1.3.3"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "jsUri\r\n=====\r\n\r\nUri and query string manipulation in javascript.\r\n\r\nThis project incorporates the excellent [parseUri](http://blog.stevenlevithan.com/archives/parseuri) regular expression library by Steven Levithan. You can safely parse URLs of all shapes and sizes, however invalid or hideous.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nPass anything that your browser would recognize as a url to the new Uri() constructor\r\n\r\n    var uri = new Uri('http://user:pass@www.test.com:81/index.html?q=books#fragment');\r\n\r\nand then use the following accessor methods to get at the various parts.\r\n\r\n    uri.protocol();                              // http\r\n    uri.userInfo();                              // user:pass\r\n    uri.host();                                  // www.test.com\r\n    uri.port();                                  // 81\r\n    uri.path();                                  // /index.html\r\n    uri.query();                                 // q=books\r\n    uri.anchor();                                // fragment\r\n\r\nThe accessor methods accept an optional value for setting the property\r\n\r\n    uri.protocol('https');\r\n    uri.toString();                              // https://user:pass@www.test.com:81/index.html?q=books#fragment\r\n\r\n    uri.host('mydomain.com');\r\n    uri.toString();                              // https://user:pass@www.mydomain.com:81/index.html?q=books#fragment\r\n\r\n\r\nFluent Setters\r\n--------------\r\n\r\nThe fluent interface provides a simple way to chain property assignment\r\n\r\n    new Uri()\r\n        .setPath('/index.html')\r\n        .setAnchor('content')\r\n        .setHost('www.test.com')\r\n        .setPort(8080)\r\n        .setUserInfo('username:password')\r\n        .setProtocol('https')\r\n        .setQuery('this=that&some=thing')      // https://username:password@www.test.com:8080/index.html?this=that&some=thing#content\r\n\r\n    new Uri('http://www.test.com')\r\n        .setHost('www.yahoo.com')\r\n        .setProtocol('https')                  // https://www.yahoo.com\r\n\r\n    new Uri()\r\n        .setPath('/archives/1979/')\r\n        .setQuery('?page=1')                   // /archives/1979?page=1\r\n\r\nQuery Parameter Access and Manipulation\r\n---------------------------------------\r\n\r\nSpecial methods are available for fetching, building and modifying query string parameters. An emhpasis is placed on query string integrity; duplicate parameter names and values are preserved. Parameter ordering is preserved when possible. URI Components are decoded for comparision, but are otherwise left in their original state.\r\n\r\n### Getting query param values by name\r\n\r\nReturns the first query param value for the key\r\n\r\n    new Uri('?cat=1&cat=2&cat=3').getQueryParamValue('cat')             // 1\r\n\r\nReturns all query param values for the given key\r\n\r\n    new Uri('?cat=1&cat=2&cat=3').getQueryParamValues('cat')            // [1, 2, 3]\r\n\r\n### Getting all query param keys and values\r\n\r\nInternally, query key/value pairs are stored as a series of two-value arrays in the Query object\r\n\r\n    new Uri('?a=b&c=d').query().params                          // [ ['a', 'b'], ['c', 'd']]\r\n\r\n### Adding query param values\r\n\r\n    new Uri().addQueryParam('q', 'books')                         // ?q=books\r\n\r\n    new Uri('http://www.github.com')\r\n        .addQueryParam('testing', '123')\r\n        .addQueryParam('one', 1)                                    // http://www.github.com/?testing=123&one=1\r\n\r\n    // insert param at index 0\r\n    new Uri('?b=2&c=3&d=4').addQueryParam('a', '1', 0)            // ?a=1&b=2&c=3&d=4\r\n\r\n### Replacing query param values\r\n\r\nReplaces every query string parameter named `key` with a single instance with the value `newVal`. If `oldValue` is supplied, only parameters valued `oldVal` will be replaced.\r\n\r\n    new Uri('?a=1&b=2&c=3')\r\n        .replaceQueryParam('a', 'eh')          // ?a=eh&b=2&c=3\r\n\r\n    new Uri('?a=1&b=2&c=3&c=4&c=5&c=6')\r\n        .replaceQueryParam('c', 'five', '5')   // ?a=1&b=2&c=3&c=4&c=five&c=6\r\n\r\n    new Uri().replaceQueryParam('page', 2)   // ?page=2\r\n\r\n\r\n### Deleting query param values\r\n\r\nRemoves instances of query parameters named `key`. If `value` is passed, only params named `key` and valued `value` will be deleted.\r\n\r\n    new Uri('?a=1&b=2&c=3')\r\n        .deleteQueryParam('a')                 // ?b=2&c=3\r\n\r\n    new Uri('test.com?a=1&b=2&c=3&a=eh')\r\n        .deleteQueryParam('a', 'eh')           // test.com/?a=1&b=2&c=3\r\n\r\n\r\nObject Cloning\r\n--------------\r\n\r\nDuplication (via `.clone()`) is an easy way to inflate an identical uri object, which you can muck around with as much as you like without destroying the original.\r\n\r\n    var baseUri = new Uri('http://localhost/');\r\n\r\n        baseUri.clone().setProtocol('https');  // https://localhost/\r\n        baseUri;                               // http://localhost/\r\n\r\nTesting\r\n-------\r\n\r\nThere is a comprensive set of unit tests written in [jasmine](http://pivotal.github.com/jasmine/).\r\nTo run them, simply open `testrunner.html` from the root of the project in a browser.\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2012 Derek Watson\r\nCopyright (c) 2007 Steven Levithan\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a\r\ncopy of this software and associated documentation files (the \"Software\"),\r\nto deal in the Software without restriction, including without limitation\r\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\r\nand/or sell copies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\nDEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/derek-watson/jsUri/issues"
  },
  "_id": "jsuri@1.2.2",
  "dist": {
    "shasum": "84f7ba978cf3c360497460c7fb5a489d12719276"
  },
  "_from": "jsuri@>=1.2.2",
  "_resolved": "https://registry.npmjs.org/jsuri/-/jsuri-1.2.2.tgz"
}
