{
  "name": "brightcove",
  "description": "node.js implementation of Brightcove APIs",
  "keywords": [
    "brightcove",
    "video",
    "media api",
    "api"
  ],
  "maintainers": "nwbb <nwebb1@gmail.com>",
  "author": {
    "name": "Nick Webb",
    "email": "nwebb1@gmail.com"
  },
  "homepage": "https://github.com/nwbb/node-brightcove",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/nwbb/node-brightcove.git"
  },
  "bugs": {
    "url": "https://github.com/nwbb/node-brightcove/issues"
  },
  "main": "./index.js",
  "scripts": {
    "test": "vows --spec"
  },
  "dependencies": {
    "jsuri": ">=1.2.2"
  },
  "devDependencies": {
    "vows": ">=0.6.1"
  },
  "engines": {
    "node": ">=0.8.x"
  },
  "readme": "[issues]: \t\t\thttps://github.com/nwbb/node-brightcove/issues\n\n[media-docs]:\t\thttp://docs.brightcove.com/en/media/\n[media-docs-tokens]:\t\thttp://support.brightcove.com/en/video-cloud/docs/managing-media-api-tokens\n[media-docs-video-read]:\thttp://docs.brightcove.com/en/media/#Video_Read\n[media-docs-video-write]: \thttp://docs.brightcove.com/en/media/#Video_Write\n[media-docs-playlist-read]:\t\thttp://docs.brightcove.com/en/media/#Playlist_Read\n[media-docs-playlist-write]:\thttp://docs.brightcove.com/en/media/#Playlist_Write\n[media-docs-search]:\thttp://support.brightcove.com/en/video-cloud/docs/searching-videos-media-api\n\n[analytics-api-docs]:\thttp://docs.brightcove.com/en/video-cloud-analytics-api/\n\n\nnode-brightcove\n=============================\n\nThis humble library aims to be a simple facade over Brigthcove's server APIs.  As Brightcove adds APIs or the mob demands additional functionality, it will be added here.\n\nPlease excuse the mess while I write up documentation and finish the MediaApi Write calls!\n\n- [Installation](#installation)\n- [Media API](#media-api)\n    - [Calls](#mediaapi-calls)\n    - [Options](#mediaapi-options)\n    - [Events](#mediaapi-events)\n- [Analytics API](#analytics-api) _(not yet implemented)_\n\n\nInstallation\n-----------------------------\nInstallation is handled via [npm](http://npmjs.org):\n\n\t$ npm install brightcove\n\nBrightcove offers several response formats, but this library demands JSON responses and, wherever possible, passes them through to you.\n\n\nMedia API\n----------------------------\nThe `MediaApi` object acts as the facade for all of the [Media API's calls and options][media-docs]. \n\nIt is instance-based, allowing you to juggle more than one [Brightcove Token][media-docs-tokens], if needed.\n\n\tvar brightcove = require('brightcove');\n\tvar\tmediaApi = new brightcove.MediaApi('myTokenOfAwesomeness');\n\n\n### MediaApi Calls ###\nBrightcove breaks up its Media API calls between Videos (read/write) and Playlists (read/write).  For organizational purposes, that's how they're listed here:\n\n**[Video Read API][media-docs-video-read]**\n\n+ <code><strong>findAllVideos</strong>(options, _[callback]_)</code>\n\n+ <code><strong>findVideoById</strong> (videoId, options, _[callback]_)</code> \n\t+ `videoId` Brightcove-assigned ID\n\n+ <code><strong>findVideosByIds</strong> (videoIds, options, _[callback]_)</code> \n\t+ `videoIds` is a simple array of brightcove video IDs\n\n+ <code><strong>findRelatedVideos</strong> (videoId, referenceId, options, _[callback]_)</code> \n\t+ `videoId` _(optional)_ Brightcove-assigned ID of the video we'd like to find related videos for\n\t+ `referenceId` _(optional)_ User-assigned ID of the video we'd like to find related videos for\n\n+ <code><strong>findVideoByReferenceId</strong> (referenceId, options, _[callback]_)</code> \n\t+ `referenceId` User-assigned, optional ID attached to a video\n\n+ <code><strong>findVideosByReferenceIds</strong> (referenceIds, options, _[callback]_)</code> \n\t+ `referenceIds` is a simple array of brightcove video IDs\n\n+ <code><strong>[searchVideos][media-docs-search]</strong> (all, any, none, exact, options, _[callback]_)</code>\n\t+ `all, any, none` Array of strings. At least one argument must be set.  Others are optional.\n\t+ `all` Videos must contain all of the specified tags\n\t+ `any` Videos can contain any of the specified tags\n\t+ `none` Videos must **not** contain any of the specified tags\n\t+ `exact` Boolean value.  If true, disables fuzzy search and requires tags to match exactly. \n\n\n**[Video Write API][media-docs-video-write]**\n\n+ _(not yet implemented)_\n\n**[Playlist Read API][media-docs-playlist-read]**\n\n+ <code><strong>findAllPlaylists</strong> (options, _[callback]_)</code> \n\n+ <code><strong>findPlaylistById</strong> (playlistId, options, _[callback]_)</code> \n\t+ `playlistId` Brightcove-assigned ID\n\n+ <code><strong>findPlaylistsByIds</strong> (playlistIds, options, _[callback]_)</code> \n\t+ `playlistIds` is a simple array of brightcove playlist IDs\n\n+ <code><strong>findPlaylistByReferenceId</strong> (referenceId, options, _[callback]_)</code> \n\t+ `referenceId` User-assigned, optional ID attached to a playlist\n\n+ <code><strong>findPlaylistsByReferenceIds</strong> (referenceIds, options, _[callback]_)</code> \n\t+ `referenceIds` is a simple array of brightcove playlist IDs\n\n\n**[Playlist Write API][media-docs-playlist-write]**\n\n+ <code><strong>createPlaylist</strong> (playlist, _[callback]_)</code>\n\t+ `playlist` Use the `brightcove.Playlist` facade to build this object.\n\n\n### MediaApi Options ###\nMost of the **read** calls require an `options` parameter which wraps up all of the available options Brightcove offers for its responses via the `Options` object. \n\nThese options govern:\n\n+ what fields are returned for each video/playlist in the response from Brightcove\n+ pagination of returned videos/playlists\n+ sorting of returned videos/playlists\n+ which video streaming delivery type to use\n+ etc.\n\nThe `Options` object is created via the `MediaApi` instance.  A convenience method is included to quickly create the usually included fields, paging, and sorting options:\n\n\tvar options = mediaApi.withDefaultOptions();\n\nHowever, you're likely going to define your own.  To do that, a fluent interface was created to make things easier:\n\n\tvar options = mediaApi.withOptions\n\t\t\t\t\t\t.havingPageSizeOf(10).atPage(2)\n\t\t\t\t\t\t.sortingBy().creationDate().inAscendingOrder();\n\nNotice that the return chain is context-aware.  If you're rocking intellisense in your editor, this should be a breeze.\n\nHere's a crazy example:\n\n\tvar options = mediaApi.withOptions()\n\t\t\t\t\t\t.includingCountOfItems()\n\t\t\t\t\t\t.havingPageSizeOf(10).atPage(2)\n\t\t\t\t\t\t.sortingBy().totalPlays().inDescendingOrder()\n\t\t\t\t\t\t.includingVideoField().videoId()\n\t\t\t\t\t\t.includingVideoField().title()\n\t\t\t\t\t\t.includingVideoField().shortDescription()\n\t\t\t\t\t\t.includingVideoField().longDescription()\n\t\t\t\t\t\t.includingVideoField().creationDate()\n\t\t\t\t\t\t.includingVideoField().publishedDate()\n\t\t\t\t\t\t.includingVideoField().lastModifiedDate()\n\t\t\t\t\t\t.includingVideoField().linkUrl()\n\t\t\t\t\t\t.includingVideoField().linkText()\n\t\t\t\t\t\t.includingVideoField().tags()\n\t\t\t\t\t\t.includingVideoField().videoStillUrl()\n\t\t\t\t\t\t.includingVideoField().thumbnailUrl()\n\t\t\t\t\t\t.includingVideoField().referenceId()\n\t\t\t\t\t\t.includingVideoField().duration()\n\t\t\t\t\t\t.includingVideoField().economics()\n\t\t\t\t\t\t.includingVideoField().playsTotal()\n\t\t\t\t\t\t.includingVideoField().playsTrailingWeek()\n\t\t\t\t\t\t.includingVideoField().videoUrl()\n\t\t\t\t\t\t.includingVideoField().renditions()\n\t\t\t\t\t\t.includingVideoField().iOSRenditions()\n\t\t\t\t\t\t.includingVideoField().FLVFullLength()\n\t\t\t\t\t\t.includingVideoField().videoFullLength()\n\t\t\t\t\t\t.httpMediaDelivery();\n\n\tmediaApi.findAllVideos(options);\n\n\n### MediaApi Events ###\nThe `MediaApi` object also inherits from node's Event Emitter, allowing you to more easily manage callbacks.  \n\n\t// Abstracted handler\n\tvar findAllVideosHandler = function(err, jsonResponse) {\n\t\tconsole.log(jsonResponse);\n\t}\n\n\t// Register the handler\n\t// Note the specific event name: 'find_all_videos'\n\tmediaApi.on('find_all_videos', findAllVideosHandler);\n\n\t// Make the call.\n\tmediaApi.findAllVideos(mediaApi.withDefaultOptions());\n\nAll events are emitted with two arguments: `err, jsonResponse`.  Following node convention, the `err` argument will be null if no error occurred as will `jsonResponse` if an error _did_ occur.\n\n**Emitted events** will have a name in congruence with Brightcove's own command names:\n\n- Video Read API\n\t- `find_all_videos`\n\t- `find_video_by_id`\n\t- `find_videos_by_ids`\n\t- `find_related_videos`\n\t- `find_video_by_reference_id`\n\t- `find_videos_by_reference_ids`\n\t- `search_videos`\n\n- Playlist Read API\n\t- `find_all_playlists`\n\t- `find_playlist_by_id`\n\t- `find_playlists_by_ids`\n\t- `find_playlist_by_reference_id`\n\t- `find_playlists_by_reference_ids`\n\n- Video Write API _(not yet implemented)_\n\n- Playlist Write API\n\t- `create_playlist`\n\t- `update_playlist`\n\t- `delete_playlist`\n\nIF you'd like _programmatic_ or _intellisense-friendly_ access to these, they can be accessed with the `commands` property:  \n\n\t// Register the handler \n\t// Specify the event name using the 'commands' enum\n\tmediaApi.on(mediaApi.commands.find_all_videos, findAllVideosHandler);\n\n\t// Make the call.\n\tmediaApi.findAllVideos(mediaApi.withDefaultOptions());\n\n\n\nAnalytics API\n----------------------------\nBrightcove's analytics API is currently in beta.  Expect it here, soon!\n\n<br />\n<br />\n\nSupport / Fixes / Comments\n-----------------------------\nIssues and comments should go through [github][issues].  I'll do my best to manage them.\n\nAny help is appreciated, too.  I'll respond as quickly as I can to all pull requests and comments.\n\n<br />\n<br />\n\nUseful Links\n-----------------------------\n - [Brightcove Media API Reference][media-docs]\n - [Brightcove Video Cloud Analytics API Reference][analytics-api-docs]\n\n\n\n<!---\n// Example usage of Options\n/*\napi.findAllVideos(api.withOptions()\n\t.includingCountOfItems()\n\t.havingPageSizeOf(10)\n\t.atPage(2)\n\t.inAscendingOrder()\n\t.inDescendingOrder()\n\t.sortingBy()\n\t\t.publishDate() or\n\t\t.creationDate() or\n\t\t.modifiedDate() or\n\t\t.totalPlays() or\n\t\t.totalPlaysOfLastWeek()\n\t.withCustomFields(Array)\n\t.includingField().videoId()\n\t.includingField().title()\n\t.includingField().shortDescription()\n\t.includingField().longDescription()\n\t.includingField().creationDate()\n\t.includingField().publishedDate()\n\t.includingField().lastModifiedDate()\n\t.includingField().linkUrl()\n\t.includingField().linkText()\n\t.includingField().tags()\n\t.includingField().videoStillUrl()\n\t.includingField().thumbnailUrl()\n\t.includingField().referenceId()\n\t.includingField().duration()\n\t.includingField().economics()\n\t.includingField().playsTotal()\n\t.includingField().playsTrailingWeek()\n\t.includingField().videoUrl()\n\t.includingField().renditions()\n\t.includingField().iOSRenditions()\n\t.includingField().FLVFullLength()\n\t.includingField().videoFullLength()\n\n\tor\n\t.includingField().all()\n\n\tor\n\t.includingField().defaults()\n\n\t.usingLiveStream()\n);\n*/ -->\n",
  "readmeFilename": "README.md",
  "_id": "brightcove@0.1.0",
  "dist": {
    "shasum": "af83150ac991c3b85d4b674a1f2da424cdb0ee8e"
  },
  "_from": "brightcove@*",
  "_resolved": "https://registry.npmjs.org/brightcove/-/brightcove-0.1.0.tgz"
}
